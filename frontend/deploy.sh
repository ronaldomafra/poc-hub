#!/bin/bash

# üöÄ Script de Deploy em Produ√ß√£o - POC Hub Frontend
# Este script automatiza o processo de deploy da aplica√ß√£o React em produ√ß√£o

set -e  # Parar execu√ß√£o em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
APP_NAME="poc-hub-frontend"
BUILD_DIR="build"
DEPLOY_DIR="/var/www/poc-hub-frontend"
BACKUP_DIR="/backups/frontend"
LOG_FILE="/var/log/poc-hub-frontend-deploy.log"
DOMAIN="tradingfordummies.site"

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a $LOG_FILE
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERRO: $1${NC}" | tee -a $LOG_FILE
    exit 1
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] AVISO: $1${NC}" | tee -a $LOG_FILE
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a $LOG_FILE
}

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para verificar se arquivo existe
file_exists() {
    [ -f "$1" ]
}

# Fun√ß√£o para verificar se diret√≥rio existe
dir_exists() {
    [ -d "$1" ]
}

# Fun√ß√£o para criar backup
create_backup() {
    log "Criando backup da aplica√ß√£o atual..."
    
    if ! dir_exists "$BACKUP_DIR"; then
        sudo mkdir -p "$BACKUP_DIR"
        sudo chown $USER:$USER "$BACKUP_DIR"
    fi
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    # Backup da aplica√ß√£o atual se existir
    if dir_exists "$DEPLOY_DIR"; then
        tar -czf "$BACKUP_DIR/frontend_backup_$TIMESTAMP.tar.gz" -C /var/www poc-hub-frontend 2>/dev/null || warning "N√£o foi poss√≠vel criar backup da aplica√ß√£o"
        log "Backup da aplica√ß√£o criado: frontend_backup_$TIMESTAMP.tar.gz"
    else
        log "Nenhuma aplica√ß√£o anterior encontrada para backup"
    fi
}

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."
    
    # Verificar Node.js
    if ! command_exists "node"; then
        error "Node.js n√£o est√° instalado. Execute: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs"
    fi
    
    # Verificar npm
    if ! command_exists "npm"; then
        error "npm n√£o est√° instalado"
    fi
    
    # Verificar Nginx
    if ! command_exists "nginx"; then
        error "Nginx n√£o est√° instalado. Execute: sudo apt install nginx -y"
    fi
    
    # Verificar package.json
    if ! file_exists "package.json"; then
        error "package.json n√£o encontrado"
    fi
    
    # Verificar se √© um projeto React
    if ! grep -q "react-scripts" package.json; then
        error "Este n√£o parece ser um projeto React (react-scripts n√£o encontrado)"
    fi
    
    log "Todos os pr√©-requisitos est√£o atendidos"
}

# Fun√ß√£o para verificar vari√°veis de ambiente
check_environment() {
    log "Verificando vari√°veis de ambiente..."
    
    # Verificar se arquivo .env existe
    if ! file_exists ".env"; then
        warning "Arquivo .env n√£o encontrado. Criando arquivo padr√£o..."
        create_env_file
    fi
    
    # Verificar se REACT_APP_API_URL est√° configurado
    if ! grep -q "REACT_APP_API_URL" .env; then
        warning "REACT_APP_API_URL n√£o configurado no .env"
    fi
    
    log "Vari√°veis de ambiente verificadas"
}

# Fun√ß√£o para criar arquivo .env padr√£o
create_env_file() {
    cat > .env << EOF
# URL da API Backend
REACT_APP_API_URL=https://tradingfordummies.site

# Configura√ß√µes do Ambiente
NODE_ENV=production
GENERATE_SOURCEMAP=false

# Configura√ß√µes de Build
REACT_APP_VERSION=1.0.0
REACT_APP_NAME=POC Hub Frontend
EOF
    
    log "Arquivo .env criado com configura√ß√µes padr√£o"
}

# Fun√ß√£o para instalar depend√™ncias
install_dependencies() {
    log "Instalando depend√™ncias..."
    
    # Limpar cache do npm
    npm cache clean --force
    
    # Instalar depend√™ncias
    npm ci --only=production || error "Erro ao instalar depend√™ncias"
    
    log "Depend√™ncias instaladas com sucesso"
}

# Fun√ß√£o para fazer build da aplica√ß√£o
build_application() {
    log "Fazendo build da aplica√ß√£o..."
    
    # Limpar build anterior se existir
    if dir_exists "$BUILD_DIR"; then
        rm -rf "$BUILD_DIR"
        log "Build anterior removido"
    fi
    
    # Fazer build
    npm run build || error "Erro ao fazer build da aplica√ß√£o"
    
    # Verificar se build foi criado
    if ! dir_exists "$BUILD_DIR"; then
        error "Build n√£o foi criado"
    fi
    
    log "Build da aplica√ß√£o criado com sucesso"
}

# Fun√ß√£o para criar diret√≥rio de deploy
create_deploy_directory() {
    log "Criando diret√≥rio de deploy..."
    
    if ! dir_exists "$DEPLOY_DIR"; then
        sudo mkdir -p "$DEPLOY_DIR"
        sudo chown $USER:$USER "$DEPLOY_DIR"
        log "Diret√≥rio de deploy criado: $DEPLOY_DIR"
    else
        log "Diret√≥rio de deploy j√° existe: $DEPLOY_DIR"
    fi
}

# Fun√ß√£o para fazer deploy
deploy_application() {
    log "Fazendo deploy da aplica√ß√£o..."
    
    # Limpar diret√≥rio de deploy
    sudo rm -rf "$DEPLOY_DIR"/*
    
    # Copiar arquivos do build
    cp -r "$BUILD_DIR"/* "$DEPLOY_DIR/" || error "Erro ao copiar arquivos para deploy"
    
    # Ajustar permiss√µes
    sudo chown -R www-data:www-data "$DEPLOY_DIR"
    sudo chmod -R 755 "$DEPLOY_DIR"
    
    log "Deploy da aplica√ß√£o conclu√≠do"
}

# Fun√ß√£o para configurar Nginx
setup_nginx() {
    log "Configurando Nginx..."
    
    # Verificar se configura√ß√£o do Nginx existe
    if ! file_exists "/etc/nginx/sites-available/poc-hub-frontend"; then
        warning "Configura√ß√£o do Nginx n√£o encontrada. Execute setup-nginx.sh primeiro"
        return
    fi
    
    # Verificar se site est√° habilitado
    if ! file_exists "/etc/nginx/sites-enabled/poc-hub-frontend"; then
        sudo ln -s /etc/nginx/sites-available/poc-hub-frontend /etc/nginx/sites-enabled/
        log "Site habilitado no Nginx"
    fi
    
    # Remover site padr√£o se existir
    if file_exists "/etc/nginx/sites-enabled/default"; then
        sudo rm /etc/nginx/sites-enabled/default
        log "Site padr√£o removido"
    fi
    
    # Testar configura√ß√£o
    if sudo nginx -t; then
        log "Configura√ß√£o do Nginx est√° v√°lida"
    else
        error "Configura√ß√£o do Nginx inv√°lida"
    fi
    
    # Recarregar Nginx
    sudo systemctl reload nginx
    
    if systemctl is-active --quiet nginx; then
        log "Nginx recarregado com sucesso"
    else
        error "Erro ao recarregar Nginx"
    fi
}

# Fun√ß√£o para verificar se aplica√ß√£o est√° funcionando
check_application() {
    log "Verificando se aplica√ß√£o est√° funcionando..."
    
    # Aguardar um pouco para o Nginx processar
    sleep 3
    
    # Testar acesso HTTP (deve redirecionar para HTTPS)
    if curl -f -s -I http://$DOMAIN >/dev/null 2>&1; then
        log "‚úÖ Redirecionamento HTTP ‚Üí HTTPS OK"
    else
        warning "‚ö†Ô∏è  Redirecionamento HTTP n√£o est√° funcionando"
    fi
    
    # Testar acesso HTTPS
    if curl -f -s -I https://$DOMAIN >/dev/null 2>&1; then
        log "‚úÖ Acesso HTTPS OK"
    else
        warning "‚ö†Ô∏è  Acesso HTTPS n√£o est√° funcionando"
    fi
    
    # Testar arquivos est√°ticos
    if curl -f -s -I https://$DOMAIN/static/js/main.js >/dev/null 2>&1; then
        log "‚úÖ Arquivos est√°ticos OK"
    else
        warning "‚ö†Ô∏è  Arquivos est√°ticos n√£o est√£o acess√≠veis"
    fi
    
    # Testar roteamento SPA
    if curl -f -s -I https://$DOMAIN/login >/dev/null 2>&1; then
        log "‚úÖ Roteamento SPA OK"
    else
        warning "‚ö†Ô∏è  Roteamento SPA n√£o est√° funcionando"
    fi
}

# Fun√ß√£o para limpar backups antigos
cleanup_old_backups() {
    log "Limpando backups antigos..."
    
    if dir_exists "$BACKUP_DIR"; then
        # Manter apenas √∫ltimos 5 backups
        find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete 2>/dev/null || true
        log "Backups antigos removidos"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes finais
show_final_info() {
    log "=== DEPLOY CONCLU√çDO COM SUCESSO ==="
    echo
    echo -e "${GREEN}‚úÖ Aplica√ß√£o: $APP_NAME${NC}"
    echo -e "${GREEN}‚úÖ Dom√≠nio: $DOMAIN${NC}"
    echo -e "${GREEN}‚úÖ Diret√≥rio: $DEPLOY_DIR${NC}"
    echo -e "${GREEN}‚úÖ Nginx: $(systemctl is-active nginx)${NC}"
    echo
    echo -e "${BLUE}üîó URLs:${NC}"
    echo -e "  HTTP: http://$DOMAIN (redireciona para HTTPS)"
    echo -e "  HTTPS: https://$DOMAIN"
    echo -e "  Login: https://$DOMAIN/login"
    echo -e "  Dashboard: https://$DOMAIN/dashboard"
    echo
    echo -e "${BLUE}üìä Comandos √∫teis:${NC}"
    echo -e "  sudo systemctl status nginx      # Status do Nginx"
    echo -e "  sudo nginx -t                    # Testar configura√ß√£o"
    echo -e "  sudo systemctl reload nginx      # Recarregar Nginx"
    echo -e "  sudo tail -f /var/log/nginx/error.log  # Logs de erro"
    echo -e "  sudo tail -f /var/log/nginx/access.log # Logs de acesso"
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  Pr√≥ximos passos:${NC}"
    echo -e "  1. Testar todas as funcionalidades da aplica√ß√£o"
    echo -e "  2. Verificar se a API est√° funcionando corretamente"
    echo -e "  3. Configurar monitoramento se necess√°rio"
    echo -e "  4. Configurar backup autom√°tico"
}

# Fun√ß√£o principal
main() {
    log "Iniciando deploy da aplica√ß√£o $APP_NAME..."
    
    # Verificar se est√° rodando como root (permitido)
    if [ "$EUID" -eq 0 ]; then
        warning "Executando como root - certifique-se de que compreende os riscos de seguran√ßa"
    fi
    
    # Verificar se est√° no diret√≥rio correto
    if ! file_exists "package.json"; then
        error "Execute este script no diret√≥rio raiz do projeto"
    fi
    
    # Executar etapas do deploy
    check_prerequisites
    check_environment
    create_backup
    install_dependencies
    build_application
    create_deploy_directory
    deploy_application
    setup_nginx
    check_application
    cleanup_old_backups
    show_final_info
    
    log "Deploy conclu√≠do com sucesso!"
}

# Fun√ß√£o de ajuda
show_help() {
    echo "Uso: $0 [OP√á√ÉO]"
    echo
    echo "Op√ß√µes:"
    echo "  -h, --help     Mostrar esta ajuda"
    echo "  -v, --version  Mostrar vers√£o"
    echo
    echo "Exemplos:"
    echo "  $0              # Executar deploy completo"
    echo "  $0 --help       # Mostrar ajuda"
}

# Fun√ß√£o de vers√£o
show_version() {
    echo "Script de Deploy POC Hub Frontend v1.0.0"
}

# Processar argumentos
case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
    -v|--version)
        show_version
        exit 0
        ;;
    "")
        main
        ;;
    *)
        error "Op√ß√£o inv√°lida: $1. Use --help para ver as op√ß√µes dispon√≠veis"
        ;;
esac 