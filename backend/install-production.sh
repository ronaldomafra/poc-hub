#!/bin/bash

# üöÄ Script de Instala√ß√£o R√°pida para Produ√ß√£o - POC Hub Backend
# Este script automatiza todo o processo de instala√ß√£o em produ√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configura√ß√µes
DOMAIN=""
SSL_EMAIL=""
DB_PASSWORD=""
JWT_SECRET=""

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERRO: $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] AVISO: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Fun√ß√£o para obter entrada do usu√°rio
get_user_input() {
    echo -n "$1: "
    read -r input
    echo "$input"
}

# Fun√ß√£o para gerar senha aleat√≥ria
generate_random_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

# Fun√ß√£o para gerar JWT secret
generate_jwt_secret() {
    openssl rand -base64 64 | tr -d "=+/"
}

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para instalar depend√™ncias do sistema
install_system_dependencies() {
    log "Instalando depend√™ncias do sistema..."
    
    # Atualizar sistema
    sudo apt update && sudo apt upgrade -y
    
    # Instalar curl
    sudo apt install curl -y
    
    # Instalar Node.js 18+
    if ! command_exists "node"; then
        log "Instalando Node.js..."
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
    fi
    
    # Instalar PostgreSQL
    if ! command_exists "psql"; then
        log "Instalando PostgreSQL..."
        sudo apt install postgresql postgresql-contrib -y
    fi
    
    # Instalar Nginx
    if ! command_exists "nginx"; then
        log "Instalando Nginx..."
        sudo apt install nginx -y
    fi
    
    # Instalar PM2
    if ! command_exists "pm2"; then
        log "Instalando PM2..."
        sudo npm install -g pm2
    fi
    
    # Instalar Certbot
    if ! command_exists "certbot"; then
        log "Instalando Certbot..."
        sudo apt install certbot python3-certbot-nginx -y
    fi
    
    log "Depend√™ncias do sistema instaladas"
}

# Fun√ß√£o para verificar PostgreSQL
check_postgresql() {
    log "Verificando PostgreSQL..."
    
    # Verificar se PostgreSQL est√° rodando
    if ! systemctl is-active --quiet postgresql; then
        warning "PostgreSQL n√£o est√° rodando. Iniciando..."
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    fi
    
    # Testar conex√£o com banco (assumindo que j√° est√° configurado)
    if command_exists "psql"; then
        if PGPASSWORD=$DB_PASSWORD psql -h localhost -U poc_mcp_system -d poc_mcp_system -c "SELECT 1;" >/dev/null 2>&1; then
            log "‚úÖ Conex√£o com PostgreSQL OK"
        else
            warning "‚ö†Ô∏è  N√£o foi poss√≠vel conectar ao PostgreSQL. Verifique as configura√ß√µes no .env"
        fi
    else
        warning "‚ö†Ô∏è  PostgreSQL n√£o est√° instalado"
    fi
}

# Fun√ß√£o para configurar arquivo .env
setup_env_file() {
    log "Configurando arquivo .env..."
    
    # Gerar JWT secret se n√£o fornecido
    if [ -z "$JWT_SECRET" ]; then
        JWT_SECRET=$(generate_jwt_secret)
        log "JWT secret gerado"
    fi
    
    # Criar arquivo .env
    cat > .env << EOF
# Configura√ß√µes do Banco de Dados
DB_HOST=localhost
DB_PORT=5432
DB_NAME=poc_mcp_system
DB_USER=poc_mcp_system
DB_PASSWORD=sua_senha_do_banco_aqui

# Configura√ß√µes do JWT
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=24h

# Configura√ß√µes do Servidor
PORT=3001
NODE_ENV=production

# Configura√ß√µes de Seguran√ßa
BCRYPT_ROUNDS=12
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Configura√ß√µes de CORS
ALLOWED_ORIGINS=https://tradingfordummies.site,https://www.tradingfordummies.site
EOF
    
    log "Arquivo .env configurado"
}

# Fun√ß√£o para instalar depend√™ncias do Node.js
install_node_dependencies() {
    log "Instalando depend√™ncias do Node.js..."
    
    # Limpar cache
    npm cache clean --force
    
    # Instalar depend√™ncias de produ√ß√£o
    npm ci --only=production || error "Erro ao instalar depend√™ncias"
    
    log "Depend√™ncias do Node.js instaladas"
}

# Fun√ß√£o para configurar firewall
setup_firewall() {
    log "Configurando firewall..."
    
    if command_exists "ufw"; then
        # Habilitar firewall
        sudo ufw --force enable
        
        # Permitir SSH
        sudo ufw allow ssh
        
        # Permitir HTTP e HTTPS
        sudo ufw allow 80
        sudo ufw allow 443
        
        # Permitir porta da API (se necess√°rio)
        sudo ufw allow 3001
        
        log "Firewall configurado"
    else
        warning "UFW n√£o est√° instalado. Configure o firewall manualmente."
    fi
}

# Fun√ß√£o para executar deploy
run_deploy() {
    log "Executando deploy da aplica√ß√£o..."
    
    # Executar script de deploy
    if [ -f "deploy.sh" ]; then
        chmod +x deploy.sh
        ./deploy.sh || error "Erro no deploy"
    else
        error "Script de deploy n√£o encontrado"
    fi
    
    log "Deploy conclu√≠do"
}

# Fun√ß√£o para configurar Nginx
setup_nginx() {
    log "Configurando Nginx..."
    
    if [ -n "$DOMAIN" ] && [ -n "$SSL_EMAIL" ]; then
        # Executar script de configura√ß√£o do Nginx
        if [ -f "setup-nginx.sh" ]; then
            chmod +x setup-nginx.sh
            ./setup-nginx.sh -d "$DOMAIN" -e "$SSL_EMAIL" || warning "Erro na configura√ß√£o do Nginx"
        fi
    else
        warning "Dom√≠nio ou email n√£o fornecidos. Configure Nginx manualmente."
    fi
    
    log "Nginx configurado"
}

# Fun√ß√£o para configurar backup autom√°tico
setup_backup() {
    log "Configurando backup autom√°tico..."
    
    # Criar diret√≥rio de backup
    sudo mkdir -p /backups
    sudo chown $USER:$USER /backups
    
    # Configurar cron para backup di√°rio
    if [ -f "backup.sh" ]; then
        chmod +x backup.sh
        (crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/backup.sh") | crontab -
        log "Backup autom√°tico configurado para 2h da manh√£"
    fi
    
    log "Backup configurado"
}

# Fun√ß√£o para testar instala√ß√£o
test_installation() {
    log "Testando instala√ß√£o..."
    
    # Testar se a aplica√ß√£o est√° rodando
    sleep 5
    if curl -f -s http://localhost:3001/health >/dev/null 2>&1; then
        log "‚úÖ Aplica√ß√£o est√° respondendo"
    else
        warning "‚ö†Ô∏è  Aplica√ß√£o n√£o est√° respondendo"
    fi
    
    # Testar PostgreSQL
    if PGPASSWORD=$DB_PASSWORD psql -h localhost -U poc_mcp_system -d poc_mcp_system -c "SELECT 1;" >/dev/null 2>&1; then
        log "‚úÖ Banco de dados est√° funcionando"
    else
        warning "‚ö†Ô∏è  Banco de dados n√£o est√° funcionando"
    fi
    
    # Testar Nginx
    if systemctl is-active --quiet nginx; then
        log "‚úÖ Nginx est√° funcionando"
    else
        warning "‚ö†Ô∏è  Nginx n√£o est√° funcionando"
    fi
    
    log "Testes conclu√≠dos"
}

# Fun√ß√£o para mostrar informa√ß√µes finais
show_final_info() {
    log "=== INSTALA√á√ÉO CONCLU√çDA ==="
    echo
    echo -e "${GREEN}‚úÖ Sistema instalado com sucesso!${NC}"
    echo
    echo -e "${BLUE}üìä Informa√ß√µes da Instala√ß√£o:${NC}"
    echo -e "  Dom√≠nio: $DOMAIN"
    echo -e "  Porta da API: 3001"
    echo -e "  Banco: poc_mcp_system (j√° configurado)"
    echo -e "  Usu√°rio do banco: poc_mcp_system"
    echo -e "  Senha do banco: configurada no .env"
    echo
    echo -e "${BLUE}üîó URLs:${NC}"
    echo -e "  Local: http://localhost:3001"
    echo -e "  Health: http://localhost:3001/health"
    if [ -n "$DOMAIN" ]; then
        echo -e "  Externa: https://$DOMAIN"
        echo -e "  Health Externa: https://$DOMAIN/health"
    fi
    echo
    echo -e "${BLUE}üìä Comandos √∫teis:${NC}"
    echo -e "  pm2 status                    # Ver status da aplica√ß√£o"
    echo -e "  pm2 logs poc-hub-backend      # Ver logs"
    echo -e "  sudo systemctl status nginx   # Status do Nginx"
    echo -e "  ./backup.sh                   # Backup manual"
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  Pr√≥ximos passos:${NC}"
    echo -e "  1. Configurar DNS para apontar para este servidor"
    echo -e "  2. Testar todos os endpoints da API"
    echo -e "  3. Configurar monitoramento"
    echo -e "  4. Documentar credenciais"
    echo
    echo -e "${RED}üîê IMPORTANTE:${NC}"
    echo -e "  - Configure a senha do banco no arquivo .env"
    echo -e "  - Guarde o JWT secret: $JWT_SECRET"
    echo -e "  - Configure backup externo"
    echo -e "  - Monitore logs regularmente"
}

# Fun√ß√£o principal
main() {
    log "Iniciando instala√ß√£o completa do POC Hub Backend..."
    
    # Verificar se est√° rodando como root
    if [ "$EUID" -eq 0 ]; then
        error "N√£o execute este script como root"
    fi
    
    # Verificar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--domain)
                DOMAIN="$2"
                shift 2
                ;;
            -e|--email)
                SSL_EMAIL="$2"
                shift 2
                ;;
            -p|--password)
                DB_PASSWORD="$2"
                shift 2
                ;;
            -j|--jwt-secret)
                JWT_SECRET="$2"
                shift 2
                ;;
            -h|--help)
                echo "Uso: $0 [OP√á√ïES]"
                echo
                echo "Op√ß√µes:"
                echo "  -d, --domain DOMAIN      Dom√≠nio para SSL"
                echo "  -e, --email EMAIL        Email para certificado SSL"
                echo "  -p, --password PASSWORD  Senha do banco (opcional)"
                echo "  -j, --jwt-secret SECRET  JWT secret (opcional)"
                echo "  -h, --help               Mostrar esta ajuda"
                echo
                echo "Exemplos:"
                echo "  $0 -d api.seudominio.com -e seu@email.com"
                echo "  $0 --domain api.seudominio.com --email seu@email.com"
                exit 0
                ;;
            *)
                error "Op√ß√£o inv√°lida: $1. Use --help para ver as op√ß√µes"
                ;;
        esac
    done
    
    # Configurar dom√≠nio fixo
    DOMAIN="tradingfordummies.site"
    
    # Obter email se n√£o fornecido
    if [ -z "$SSL_EMAIL" ]; then
        SSL_EMAIL=$(get_user_input "Digite o email para certificado SSL")
    fi
    
    # Executar etapas da instala√ß√£o
    install_system_dependencies
    setup_env_file
    check_postgresql
    install_node_dependencies
    setup_firewall
    run_deploy
    setup_nginx
    setup_backup
    test_installation
    show_final_info
    
    log "Instala√ß√£o conclu√≠da com sucesso!"
}

# Executar fun√ß√£o principal
main "$@" 